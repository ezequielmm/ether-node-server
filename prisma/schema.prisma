// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model CharacterClass {
    id         String   @id @default(uuid())
    name       String   @unique @db.VarChar(255)
    created_at DateTime @default(now())
    cards      Card[]

    @@map("character_classes")
}

model Character {
    id             String             @id @default(uuid())
    name           String             @unique @db.VarChar(250)
    description    String?            @db.Text()
    class          CharacterClassEnum
    initial_health Int                @default(0)
    initial_gold   Int                @default(0)
    cardpool_id    String
    created_at     DateTime           @default(now())

    cardpool CardPool @relation(fields: [cardpool_id], references: [id])

    @@map("characters")
}

model Card {
    id                 String          @id @default(uuid())
    name               String          @unique @db.VarChar(250)
    description        String          @db.VarChar(250)
    character_class_id String
    code               String          @unique @db.VarChar(255)
    rarity             CardRarityEnum
    cost               Int             @default(0)
    type               CardTypeEnum
    keyword            CardKeywordEnum
    coin_cost          Int             @default(0)
    status             CardStatusEnum
    created_at         DateTime        @default(now())

    character_classes CharacterClass? @relation(fields: [character_class_id], references: [id])

    @@map("cards")
}

model Enemy {
    id         String            @id @default(uuid())
    name       String            @unique @db.VarChar(200)
    type       EnemyTypeEnum?
    category   EnemyCategoryEnum @default(basic)
    life       Int               @default(0)
    min_attack Int               @default(0)
    max_attach Int               @default(0)
    act_id     Int?
    created_at DateTime          @default(now())
    NodeEnemy  NodeEnemy[]

    @@map("enemies")
}

model Room {
    id         String         @id @default(uuid())
    player_id  String         @db.VarChar(191)
    status     RoomStatusEnum
    created_at DateTime       @default(now())

    @@map("rooms")
}

model Node {
    id          String       @id @default(uuid())
    name        String       @unique @db.VarChar(50)
    description String?      @db.Text()
    created_at  DateTime     @default(now())
    type        NodeTypeEnum
    NodeEnemy   NodeEnemy[]

    @@map("nodes")
}

model NodeEnemy {
    id         String   @id @default(uuid())
    node_id    String
    enemy_id   String
    quantity   Int      @default(1) @db.SmallInt()
    created_at DateTime @default(now())

    node  Node  @relation(fields: [node_id], references: [id])
    enemy Enemy @relation(fields: [enemy_id], references: [id])

    @@map("node_enemies")
}

model CardPool {
    id         String                 @id @default(uuid())
    name       String                 @unique @db.VarChar(250)
    visibility CardpoolVisibilityEnum
    created_at DateTime               @default(now())
    Character  Character[]

    @@map("cardpools")
}

enum CardRarityEnum {
    common
    uncommon
    special
    rare
    basic
}

enum CardTypeEnum {
    attack
    skill
    power
    status
    curse
}

enum CardKeywordEnum {
    exhaust
    innate
    ethereal
    retain
    unaplayable
}

enum CardStatusEnum {
    active
    inactive
}

enum EnemyTypeEnum {
    beast
    fey
    undead
    clockwork
    eldritch
}

enum EnemyCategoryEnum {
    basic
    elite
    boss
}

enum RoomStatusEnum {
    in_progress
    canceled
    finished
}

enum NodeTypeEnum {
    combat
    royal_house
    encounter
    merchant
    treasure
    camp
}

enum CharacterClassEnum {
    knight
    rogue
}

enum CardpoolVisibilityEnum {
    visible
    hidden
}
