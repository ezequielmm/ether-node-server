// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model CharacterClass {
    id         String      @id @default(uuid())
    name       String      @unique @db.VarChar(255)
    created_at DateTime    @default(now())
    characters Character[]
    cards      Card[]

    @@map("character_classes")
}

model Character {
    id         String   @id @default(uuid())
    name       String   @unique @db.VarChar(255)
    class_id   String
    created_at DateTime @default(now())

    characterClass CharacterClass @relation(fields: [class_id], references: [id])

    @@map("characters")
}

model Card {
    id                 String       @id @default(uuid())
    name               String       @unique @db.VarChar(250)
    description        String       @db.VarChar(250)
    character_class_id String
    code               String       @unique @db.VarChar(255)
    rarity             CardRarity
    cost               Int          @default(0)
    type               CardType
    keyword            CardKeywords
    coin_cost          Int          @default(0)
    status             CardStatus
    created_at         DateTime     @default(now())

    character_classes CharacterClass? @relation(fields: [character_class_id], references: [id])

    @@map("cards")
}

model Enemy {
    id         String        @id @default(uuid())
    name       String        @unique @db.VarChar(200)
    type       EnemyType?
    category   EnemyCategory @default(basic)
    life       Int           @default(0)
    min_attack Int           @default(0)
    max_attach Int           @default(0)
    act_id     Int?
    created_at DateTime      @default(now())
    NodeEnemy  NodeEnemy[]

    @@map("enemies")
}

model Room {
    id         String     @id @default(uuid())
    player_id  String     @db.VarChar(191)
    status     RoomStatus
    created_at DateTime   @default(now())

    @@map("rooms")
}

model Node {
    id          String      @id @default(uuid())
    name        String      @unique @db.VarChar(50)
    description String?     @db.Text()
    created_at  DateTime    @default(now())
    type        NodeType
    NodeEnemy   NodeEnemy[]

    @@map("nodes")
}

model NodeEnemy {
    id         String   @id @default(uuid())
    node_id    String
    enemy_id   String
    quantity   Int      @default(1) @db.SmallInt()
    created_at DateTime @default(now())

    node  Node  @relation(fields: [node_id], references: [id])
    enemy Enemy @relation(fields: [enemy_id], references: [id])

    @@map("node_enemies")
}

enum CardRarity {
    common
    uncommon
    special
    rare
    basic
}

enum CardType {
    attack
    skill
    power
    status
    curse
}

enum CardKeywords {
    exhaust
    innate
    ethereal
    retain
    unaplayable
}

enum CardStatus {
    active
    inactive
}

enum EnemyType {
    beast
    fey
    undead
    clockwork
    eldritch
}

enum EnemyCategory {
    basic
    elite
    boss
}

enum RoomStatus {
    in_progress
    canceled
    finished
}

enum NodeType {
    combat
    royal_house
    encounter
    merchant
    treasure
    camp
}
