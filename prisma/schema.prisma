generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CharacterClass {
  id         String      @id @default(uuid())
  name       String      @unique @db.VarChar(255)
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  cards      Card[]
  characters Character[]

  @@map("character_classes")
}

model Character {
  id             String         @id @default(uuid())
  name           String         @unique @db.VarChar(255)
  class_id       String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @default(now())
  characterClass CharacterClass @relation(fields: [class_id], references: [id])

  @@index([class_id], map: "characters_class_id_fkey")
  @@map("characters")
}

model Card {
  id                 String         @id @default(uuid())
  name               String         @unique @db.VarChar(250)
  description        String         @db.VarChar(250)
  character_class_id String
  code               String         @unique @db.VarChar(255)
  rarity             CardRarity
  cost               Int            @default(0)
  type               CardType
  keyword            CardKeywords
  coin_cost          Int            @default(0)
  status             CardStatus
  created_at         DateTime       @default(now())
  updated_at         DateTime       @default(now())
  character_classes  CharacterClass @relation(fields: [character_class_id], references: [id])

  @@index([character_class_id], map: "cards_character_class_id_fkey")
  @@map("cards")
}

model Enemy {
  id         String        @id @default(uuid())
  name       String        @unique @db.VarChar(200)
  type       EnemyType?
  category   EnemyCategory @default(basic)
  life       Int           @default(0)
  min_attack Int           @default(0)
  max_attach Int           @default(0)
  act_id     Int?

  @@map("enemies")
}

model Room {
  id        String     @id @default(uuid())
  player_id String
  status    RoomStatus

  @@map("rooms")
}

model Profile {
  id       String @id @default(uuid())
  email    String @unique @db.VarChar(255)
  password String @unique @db.VarChar(255)
  refresh_token String? @db.Text

  @@map("profiles")
}

enum CardRarity {
  common
  uncommon
  special
  rare
  basic
}

enum CardType {
  attack
  skill
  power
  status
  curse
}

enum CardKeywords {
  exhaust
  innate
  ethereal
  retain
  unaplayable
}

enum CardStatus {
  active
  inactive
}

enum EnemyType {
  beast
  fey
  undead
  clockwork
  eldritch
}

enum EnemyCategory {
  basic
  elite
  boss
}

enum RoomStatus {
  in_progress
  canceled
  finished
}
