import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ContestService } from 'src/game/contest/contest.service';
import { ContestMapService } from 'src/game/contestMap/contestMap.service';
import {
    addDaysToDate,
    addHoursToDate,
    findStepWithMostNodes,
    setHoursMinutesSecondsToUTCDate,
} from 'src/utils';
import { MapBuilderService } from 'src/game/map/builder/mapBuilder.service';
import { createStage1NewMap } from 'src/game/map/builder/actOne.config';
import { SettingsService } from 'src/game/components/settings/settings.service';
import { IActConfiguration } from 'src/game/map/builder/mapBuilder.interface';
import { createStage2NewMap } from 'src/game/map/builder/actTwo.config';


@Injectable()
export class TaskService {
    private readonly logger: Logger = new Logger(TaskService.name);

    constructor(
        private readonly mapBuilderService: MapBuilderService,
        private readonly contestService: ContestService,
        private readonly contestMapService: ContestMapService,
        private readonly settingsService: SettingsService,
    ) {}

    @Cron(CronExpression.EVERY_DAY_AT_4PM, { 
        name: 'Create Contest Map',
        timeZone: 'UTC',
    })
    async handleMapCreation(): Promise<void> {
        console.log("Checking if we need to create a new map for today contest...")

        // First we get the current date and add 24 hours to it
        // then we set the time to 00:00:00 to get the available_at date
        const now = new Date();

        const availableAt = addDaysToDate(now);
        availableAt.setUTCHours(16, 0, 0, 0);

        const contestExists = await this.contestService.findActiveContest(
            availableAt,
        );

        // If we have a contest, we don't need to create a new map
        if (contestExists !== null) {
            console.log("We have a contest for today, skipping...");
            return;
        }
        
        // Now we calculate the valid_until from the ends_at date

        const endsAtDate = addDaysToDate(availableAt);
        const endsAt = setHoursMinutesSecondsToUTCDate(
            endsAtDate,
            15,
            59,
            59,
            999,
        );

        const validUntil = addHoursToDate(endsAt, 6);
        const { maxAutogeneratedMapSteps, maxAutogeneratedMapNodes, numberOfStages } = await this.settingsService.getSettings();
        
        let stages: string[] = [];
        const contestName = `Autogenerated map ${now.getTime()}`

        for(let i = 0; i < numberOfStages; i++){
            
            let actConfig: IActConfiguration;
            
            switch(i){
                case 0:
                    actConfig = createStage1NewMap(maxAutogeneratedMapSteps, maxAutogeneratedMapNodes);
                    break;
                case 1:
                    actConfig = createStage2NewMap(maxAutogeneratedMapSteps, maxAutogeneratedMapNodes);
                    break;
                default:
                    console.log("--------------------------------------------------------------------------------------------------")
                    console.log("Entered a stage switch option that shouldn't.")
                    console.log(numberOfStages)
                    console.log("--------------------------------------------------------------------------------------------------")
            }

            const map = await this.mapBuilderService.createMap({
                actConfig: actConfig,
                makeAvailable: true
            });

            const contestMap = await this.contestMapService.create({
                name: `${contestName} - Stage: ${1 + i}`,
                nodes: map,
                maxSteps: maxAutogeneratedMapSteps,
                maxNodes: findStepWithMostNodes(map),
                isGenerated: true,
            });

            stages[i] = contestMap.id;
        }

        // Now we get the last event_id from the database, this filed is used to
        // show the map on the admin panel calendar
        const event_id = await this.contestService.getLastEventId();

        // Now we schedule the contest to the day
        await this.contestService.create({
            stages: stages,
            event_id: event_id + 1,
            available_at: availableAt,
            ends_at: endsAt,
            valid_until: validUntil,
            name: contestName
        });

        console.log("Created a new map and contest for today!")
    }
}
